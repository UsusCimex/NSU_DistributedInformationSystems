services:
  mongodb1:
    image: bitnami/mongodb:latest
    container_name: mongodb1
    environment:
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_ROOT_PASSWORD=secret
      - MONGODB_REPLICA_SET_KEY=myReplicaKey
      - MONGODB_ADVERTISED_HOSTNAME=mongodb1
      - MONGODB_EXTRA_FLAGS=--quiet
    ports:
      - "27017:27017"
    volumes:
      - mongodb1_data:/bitnami/mongodb
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "localhost:27017", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongodb2:
    image: bitnami/mongodb:latest
    container_name: mongodb2
    depends_on:
      - mongodb1
    environment:
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_PRIMARY_HOST=mongodb1
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=secret
      - MONGODB_REPLICA_SET_KEY=myReplicaKey
      - MONGODB_ADVERTISED_HOSTNAME=mongodb2
      - MONGODB_EXTRA_FLAGS=--quiet
    ports:
      - "27018:27017"
    volumes:
      - mongodb2_data:/bitnami/mongodb
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "localhost:27017", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongodb3:
    image: bitnami/mongodb:latest
    container_name: mongodb3
    depends_on:
      - mongodb1
    environment:
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_PRIMARY_HOST=mongodb1
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=secret
      - MONGODB_REPLICA_SET_KEY=myReplicaKey
      - MONGODB_ADVERTISED_HOSTNAME=mongodb3
      - MONGODB_EXTRA_FLAGS=--quiet
    ports:
      - "27019:27017"
    volumes:
      - mongodb3_data:/bitnami/mongodb
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "localhost:27017", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  manager:
    build:
      context: .
      dockerfile: manager/Dockerfile
    container_name: manager
    depends_on:
      mongodb1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      - PORT=8080
      - MONGODB_URI=mongodb://root:secret@mongodb1:27017,mongodb2:27017,mongodb3:27017/?replicaSet=rs0&authSource=admin
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    deploy:
      replicas: 3

volumes:
  mongodb1_data:
  mongodb2_data:
  mongodb3_data:
  rabbitmq_data:
